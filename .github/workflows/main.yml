# Dosya Yolu: .github/workflows/main.yml (Doğru Sıralama ile Nihai Sürüm)

name: TİTCK Veri Otomasyonu

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

permissions:
  contents: write

jobs:
  # Bu iş, halka açık verileri temizler
  veri-temizleme:
    runs-on: ubuntu-latest
    name: Veri Dosyalarını Temizle ve Güncelle

    steps:
      - name: Depoyu Klonla
        uses: actions/checkout@v4

      - name: Python 3.9 Kurulumu
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Bağımlılıkları Yükle (requirements.txt)
        # ÖNCE kütüphaneleri kuruyoruz
        run: python -m pip install -r requirements.txt

      - name: Veri Temizleme Betiğini Çalıştır
        run: python data_cleaner.py

      - name: Değişiklikleri Depoya Gönder
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add islenmis_veriler/
          if [[ -z $(git status --porcelain) ]]; then
            echo "İşlenmiş verilerde herhangi bir değişiklik bulunamadı."
          else
            TODAY=$(date -u +"%Y-%m-%d")
            git commit -m "Otomatik Veri Temizleme: $TODAY"
            git push
          fi
          
  # Bu iş, şifreli dosyayı indirmeyi dener
  guvenli-veri-indirme:
    runs-on: ubuntu-latest
    name: (Deneysel) Güvenli Veri İndirme
    continue-on-error: true

    steps:
      - name: Depoyu Klonla
        uses: actions/checkout@v4

      - name: Python 3.9 Kurulumu
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Tam Bağımlılıkları Yükle
        # ÖNCE kütüphaneleri kuruyoruz
        run: python -m pip install -r requirements.txt

      - name: Playwright Tarayıcılarını Kur
        # SONRA kütüphanenin komutunu çalıştırıyoruz
        run: python -m playwright install --with-deps

      - name: Güvenli Dosyayı İndirmeyi Dene (downloader.py)
        id: download_step
        env:
          TITCK_USERNAME: ${{ secrets.TITCK_USERNAME }}
          TITCK_PASSWORD: ${{ secrets.TITCK_PASSWORD }}
          TWOCAPTCHA_API_KEY: ${{ secrets.TWOCAPTCHA_API_KEY }}
        run: python downloader.py

      - name: Hata Durumunda Ekran Görüntüsünü Yükle
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: guvenli-downloader-hata-goruntusu
          path: debug_screenshot.png